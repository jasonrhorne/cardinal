name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch: # Allow manual trigger

env:
  NODE_VERSION: '20'

jobs:
  # Code Quality and Testing Job
  quality:
    name: Code Quality & Testing
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Validate environment configuration
        run: npm run env:validate:ci
        env:
          # Provide minimal environment for validation
          NEXT_PUBLIC_APP_ENV: development
          NEXT_PUBLIC_APP_VERSION: 0.1.0
          NEXT_PUBLIC_APP_URL: http://localhost:3000
          NEXT_PUBLIC_API_URL: http://localhost:3000/api

      - name: Run TypeScript type checking
        run: |
          echo "üîç Running TypeScript type checking..."
          npm run typecheck || {
            echo "‚ùå TypeScript errors found!"
            echo ""
            echo "üí° Common fixes:"
            echo "   - Check for missing environment variables in lib/config/env.ts"
            echo "   - Verify all imports have proper type definitions"
            echo "   - Run 'npm run typecheck' locally to see detailed errors"
            exit 1
          }

      - name: Run ESLint
        run: |
          echo "üîç Running ESLint..."
          npm run lint || {
            echo "‚ùå ESLint errors found!"
            echo ""
            echo "üí° Quick fixes:"
            echo "   - Run 'npm run lint:fix' to auto-fix many issues"
            echo "   - Check for unused variables and imports"
            echo "   - Verify import ordering (external ‚Üí internal ‚Üí types)"
            exit 1
          }

      - name: Check Prettier formatting
        run: |
          echo "üîç Checking code formatting..."
          npm run format:check || {
            echo "‚ùå Code formatting issues found!"
            echo ""
            echo "üí° Quick fix:"
            echo "   - Run 'npm run format' to auto-format all files"
            echo "   - Ensure your editor has Prettier integration enabled"
            exit 1
          }

      - name: Run tests with coverage
        run: npm run test:ci

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: success()
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          fail_ci_if_error: false

  # Build Job
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: quality

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: |
          echo "üèóÔ∏è Building application for production..."
          npm run build || {
            echo "‚ùå Build failed!"
            echo ""
            echo "üí° Common build issues:"
            echo "   - Environment variables missing from lib/config/env.ts"
            echo "   - TypeScript errors not caught in previous step"
            echo "   - Import/export issues or circular dependencies"
            echo "   - Missing dependencies or version conflicts"
            echo ""
            echo "üîß Debugging steps:"
            echo "   1. Run 'npm run build' locally to reproduce"
            echo "   2. Check 'npm run typecheck' for type errors"
            echo "   3. Verify all environment variables are defined"
            echo "   4. Test in production mode: 'NODE_ENV=production npm run build'"
            exit 1
          }
        env:
          # Build-time environment variables
          NODE_ENV: production
          NEXT_PUBLIC_APP_ENV: production
          NEXT_PUBLIC_APP_VERSION: 0.1.0
          NEXT_PUBLIC_APP_URL: https://cardinal.app
          NEXT_PUBLIC_API_URL: https://cardinal.app/api
          # Supabase environment variables (required for build)
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}

  # Security Audit Job
  security:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level high

      - name: Check for known vulnerabilities
        run: npx audit-ci --config ./audit-ci.json || echo "Audit completed with warnings"

  # Notification Job
  notify:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [quality, build, security]
    if: always()

    steps:
      - name: Notify Success
        if: ${{ needs.quality.result == 'success' && needs.build.result == 'success' && needs.security.result == 'success' }}
        run: |
          echo "‚úÖ CI/CD Pipeline completed successfully!"
          echo "All quality checks passed, build succeeded, and security audit completed."
          echo "Deployment is handled automatically by Netlify."

      - name: Notify Failure
        if: ${{ needs.quality.result == 'failure' || needs.build.result == 'failure' || needs.security.result == 'failure' }}
        run: |
          echo "‚ùå CI/CD Pipeline failed!"
          echo "Quality: ${{ needs.quality.result }}"
          echo "Build: ${{ needs.build.result }}"
          echo "Security: ${{ needs.security.result }}"
          exit 1
