-- ============================================================================
-- CARDINAL DATABASE MIGRATION 002: TRAVEL REQUIREMENTS
-- Version: 1.1.0
-- Description: Travel requirements and AI generation system
-- Dependencies: 001_foundation
-- ============================================================================

-- ============================================================================
-- TRAVEL REQUIREMENTS SYSTEM
-- ============================================================================

-- Travel requirement capture
CREATE TABLE travel_requirements (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  origin_city_id UUID REFERENCES cities(id),
  
  -- Travel constraints
  max_travel_time_hours INTEGER,
  travel_modes TEXT[] DEFAULT '{}',
  group_size INTEGER NOT NULL CHECK (group_size > 0),
  adults_count INTEGER NOT NULL CHECK (adults_count > 0),
  children_ages INTEGER[] DEFAULT '{}',
  duration_days INTEGER,
  
  -- Preferences
  interests TEXT[] DEFAULT '{}',
  pace_preference TEXT DEFAULT 'moderate' CHECK (pace_preference IN ('slow', 'moderate', 'fast')),
  budget_range TEXT CHECK (budget_range IN ('budget', 'mid_range', 'luxury', 'varies')),
  
  -- Special needs
  dietary_restrictions TEXT[] DEFAULT '{}',
  accessibility_needs TEXT[] DEFAULT '{}',
  lodging_preferences JSONB DEFAULT '{}',
  special_constraints TEXT,
  
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- ============================================================================
-- AI GENERATION SYSTEM
-- ============================================================================

-- AI generation sessions to track complete workflows
CREATE TABLE ai_generation_sessions (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  travel_requirements_id UUID REFERENCES travel_requirements(id),
  
  -- Session identification and type
  session_type TEXT NOT NULL CHECK (session_type IN (
    'destination_suggestions',
    'itinerary_generation',
    'itinerary_refinement',
    'question_answering',
    'place_validation'
  )),
  
  -- Session state and progress
  status TEXT NOT NULL DEFAULT 'initialized' CHECK (status IN (
    'initialized', 'in_progress', 'completed', 'failed', 'cancelled', 'timed_out'
  )),
  
  -- AI model and configuration
  primary_model TEXT NOT NULL,
  model_version TEXT,
  model_temperature DECIMAL(3,2) DEFAULT 0.7,
  max_tokens INTEGER,
  
  -- Parent session for refinements
  parent_session_id UUID REFERENCES ai_generation_sessions(id),
  refinement_depth INTEGER DEFAULT 0 CHECK (refinement_depth >= 0),
  
  -- Resource tracking
  total_tokens_used INTEGER DEFAULT 0,
  total_cost_usd DECIMAL(10,6) DEFAULT 0.00,
  processing_time_seconds INTEGER,
  
  -- Quality metrics
  user_satisfaction_rating INTEGER CHECK (user_satisfaction_rating >= 1 AND user_satisfaction_rating <= 5),
  output_quality_score DECIMAL(3,2),
  hallucination_flags TEXT[] DEFAULT '{}',
  
  -- Error handling
  error_message TEXT,
  retry_count INTEGER DEFAULT 0 CHECK (retry_count >= 0),
  
  -- Timestamps
  started_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  completed_at TIMESTAMPTZ,
  last_activity_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  
  -- Session metadata
  metadata JSONB DEFAULT '{}'
);

-- Individual messages within AI conversations
CREATE TABLE ai_conversation_messages (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  session_id UUID NOT NULL REFERENCES ai_generation_sessions(id) ON DELETE CASCADE,
  
  -- Message identification and ordering
  message_sequence INTEGER NOT NULL CHECK (message_sequence > 0),
  message_role TEXT NOT NULL CHECK (message_role IN (
    'system', 'user', 'assistant', 'tool', 'function'
  )),
  
  -- Message content
  content TEXT NOT NULL,
  content_type TEXT DEFAULT 'text' CHECK (content_type IN ('text', 'json', 'markdown')),
  
  -- Token usage
  input_tokens INTEGER DEFAULT 0,
  output_tokens INTEGER DEFAULT 0,
  total_tokens INTEGER GENERATED ALWAYS AS (input_tokens + output_tokens) STORED,
  
  -- Tool and function calls
  tool_calls JSONB,
  tool_call_results JSONB,
  function_name TEXT,
  function_arguments JSONB,
  
  -- Quality metrics
  confidence_score DECIMAL(3,2),
  factual_accuracy_score DECIMAL(3,2),
  relevance_score DECIMAL(3,2),
  
  -- Content analysis
  sentiment_score DECIMAL(3,2),
  detected_intent TEXT,
  extracted_entities JSONB,
  
  -- Processing metadata
  processing_time_ms INTEGER,
  model_used TEXT,
  temperature_used DECIMAL(3,2),
  
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  metadata JSONB DEFAULT '{}',
  
  UNIQUE(session_id, message_sequence)
);

-- Destination suggestions generated by AI
CREATE TABLE destination_suggestions (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  session_id UUID NOT NULL REFERENCES ai_generation_sessions(id),
  city_id UUID NOT NULL REFERENCES cities(id),
  
  -- Ranking and presentation
  rank INTEGER NOT NULL CHECK (rank > 0),
  rationale TEXT NOT NULL,
  highlights TEXT[] DEFAULT '{}',
  
  -- Travel logistics
  estimated_flight_time_hours DECIMAL(4,2),
  estimated_drive_time_hours DECIMAL(4,2),
  
  -- Quality metrics
  confidence_score DECIMAL(3,2) CHECK (confidence_score >= 0 AND confidence_score <= 1),
  
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  is_selected BOOLEAN DEFAULT false
);

-- ============================================================================
-- INDEXES FOR AI AND TRAVEL SYSTEMS
-- ============================================================================

-- Travel requirements indexes
CREATE INDEX idx_travel_requirements_user_id ON travel_requirements (user_id);
CREATE INDEX idx_travel_requirements_origin_city ON travel_requirements (origin_city_id);
CREATE INDEX idx_travel_requirements_created ON travel_requirements (created_at DESC);

-- AI generation session indexes
CREATE INDEX idx_ai_sessions_user_id ON ai_generation_sessions (user_id);
CREATE INDEX idx_ai_sessions_requirements ON ai_generation_sessions (travel_requirements_id);
CREATE INDEX idx_ai_sessions_type_status ON ai_generation_sessions (session_type, status);
CREATE INDEX idx_ai_sessions_started_at ON ai_generation_sessions (started_at DESC);
CREATE INDEX idx_ai_sessions_model ON ai_generation_sessions (primary_model, completed_at) 
WHERE status = 'completed';

-- AI conversation indexes
CREATE INDEX idx_ai_messages_session_sequence ON ai_conversation_messages (session_id, message_sequence);
CREATE INDEX idx_ai_messages_role ON ai_conversation_messages (message_role);
CREATE INDEX idx_ai_messages_created ON ai_conversation_messages (created_at DESC);

-- Destination suggestion indexes
CREATE INDEX idx_destination_suggestions_session ON destination_suggestions (session_id);
CREATE INDEX idx_destination_suggestions_city ON destination_suggestions (city_id);
CREATE INDEX idx_destination_suggestions_rank ON destination_suggestions (session_id, rank);
CREATE INDEX idx_destination_suggestions_selected ON destination_suggestions (is_selected, created_at DESC);

-- ============================================================================
-- ROW LEVEL SECURITY POLICIES
-- ============================================================================

-- Travel requirements belong to users
ALTER TABLE travel_requirements ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can manage own travel requirements" ON travel_requirements
  FOR ALL USING (auth.uid() = user_id);

-- AI sessions belong to users
ALTER TABLE ai_generation_sessions ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can view own AI sessions" ON ai_generation_sessions
  FOR SELECT USING (auth.uid() = user_id);

-- AI messages belong to session owners
ALTER TABLE ai_conversation_messages ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can view own conversation messages" ON ai_conversation_messages
  FOR SELECT USING (
    auth.uid() = (SELECT user_id FROM ai_generation_sessions WHERE id = session_id)
  );

-- Destination suggestions belong to session owners
ALTER TABLE destination_suggestions ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can view own destination suggestions" ON destination_suggestions
  FOR SELECT USING (
    auth.uid() = (SELECT user_id FROM ai_generation_sessions WHERE id = session_id)
  );

-- ============================================================================
-- UTILITY FUNCTIONS
-- ============================================================================

-- Apply update triggers
CREATE TRIGGER update_travel_requirements_updated_at BEFORE UPDATE ON travel_requirements
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Function to get conversation history for a session
CREATE OR REPLACE FUNCTION get_conversation_history(
  p_session_id UUID,
  p_limit INTEGER DEFAULT 50
)
RETURNS TABLE (
  message_id UUID,
  role TEXT,
  content TEXT,
  tokens_used INTEGER,
  created_at TIMESTAMPTZ
) AS $$
BEGIN
  RETURN QUERY
  SELECT 
    acm.id,
    acm.message_role,
    acm.content,
    acm.total_tokens,
    acm.created_at
  FROM ai_conversation_messages acm
  WHERE acm.session_id = p_session_id
  ORDER BY acm.message_sequence
  LIMIT p_limit;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Function to calculate AI session statistics
CREATE OR REPLACE FUNCTION get_ai_session_stats(
  p_user_id UUID DEFAULT NULL,
  p_days INTEGER DEFAULT 30
)
RETURNS TABLE (
  total_sessions BIGINT,
  successful_sessions BIGINT,
  avg_processing_time DECIMAL,
  total_tokens BIGINT,
  total_cost DECIMAL
) AS $$
BEGIN
  RETURN QUERY
  SELECT 
    COUNT(*) as total_sessions,
    COUNT(*) FILTER (WHERE status = 'completed') as successful_sessions,
    AVG(processing_time_seconds) as avg_processing_time,
    SUM(total_tokens_used) as total_tokens,
    SUM(total_cost_usd) as total_cost
  FROM ai_generation_sessions
  WHERE (p_user_id IS NULL OR user_id = p_user_id)
    AND started_at >= NOW() - INTERVAL '1 day' * p_days;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- ============================================================================
-- MIGRATION COMPLETION
-- ============================================================================

-- Record this migration
INSERT INTO schema_migrations (version, description) VALUES 
  ('002_travel_requirements', 'Travel requirements capture and AI generation system');

-- Success message
DO $$
BEGIN
  RAISE NOTICE 'Migration 002_travel_requirements completed successfully';
  RAISE NOTICE 'Created tables: travel_requirements, ai_generation_sessions, ai_conversation_messages, destination_suggestions';
  RAISE NOTICE 'Applied RLS policies and performance indexes';
  RAISE NOTICE 'Added utility functions for conversation history and stats';
END $$;